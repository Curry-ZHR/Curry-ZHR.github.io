<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分区式存储管理算法模拟</title>
      <link href="/posts/cunchu/"/>
      <url>/posts/cunchu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ul><li>掌握分区式存储管理方式</li><li>实现首次适应算法、最佳适应算法、最坏适应算法</li><li>对比不同算法优缺点</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><ul><li>首次适应算法</li><li>最坏适应算法</li><li>最佳适应算法</li></ul><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h2><ul><li>实践平台：windows</li><li>编写环境：python</li><li>编译器：pycharm</li></ul><h2 id="四、实验设计原理"><a href="#四、实验设计原理" class="headerlink" title="四、实验设计原理"></a>四、实验设计原理</h2><ol><li><p>首次适应算法</p><p>当接到内存申请时，查找分区说明表，找到第一个满足申请长度的空闲区，将其分割并分配。</p></li><li><p>最坏适应算法</p><p>当接到内存申请时，查找分区说明表，找到第一个满足申请长度的最小空闲区，将其分割并分配。</p></li><li><p>最佳适应算法</p><p>当接到内存申请时，查找分区说明表，找到第一个满足申请长度的最大空闲区，将其分割并分配。</p></li></ol><h2 id="五、实验详细实现过程及算法流程"><a href="#五、实验详细实现过程及算法流程" class="headerlink" title="五、实验详细实现过程及算法流程"></a>五、实验详细实现过程及算法流程</h2><ol><li><p>首次适应算法</p><p><img src="%E5%AE%9E%E9%AA%8C%E4%BA%8C%E9%A6%96%E6%AC%A1%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.png"></p></li><li><p>最坏适应算法</p><p><img src="%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9C%80%E5%9D%8F%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.png"></p></li><li><p>最佳适应算法</p></li></ol><p><img src="%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9C%80%E4%BD%B3%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.png"></p><h2 id="六、实验调试与结果分析"><a href="#六、实验调试与结果分析" class="headerlink" title="六、实验调试与结果分析"></a>六、实验调试与结果分析</h2><ol><li><p>输入：</p><p><img src="%E5%AE%9E%E9%AA%8C%E4%BA%8C%E8%BE%93%E5%85%A5.png"></p></li><li><p>首次适应算法</p><p><img src="%E9%A6%96%E6%AC%A1%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.jpg"></p></li><li><p>最坏适应算法</p><p><img src="%E6%9C%80%E5%9D%8F%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.jpg"></p></li><li><p>最佳适应算法</p><p><img src="%E6%9C%80%E4%BD%B3%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95.jpg"></p></li></ol><h2 id="七、源代码"><a href="#七、源代码" class="headerlink" title="七、源代码"></a>七、源代码</h2><ol><li>Area类与Work类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Area</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, address, size,isFree=<span class="literal">True</span></span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.address = address</span><br><span class="line">        self.size = size</span><br><span class="line">        self.isFree = isFree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Work</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,work</span>):</span><br><span class="line">        self.work = work</span><br></pre></td></tr></table></figure><ol start="2"><li>功能函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">judge_busy</span>(<span class="params">isFree</span>):</span><br><span class="line">    <span class="keyword">if</span> (isFree == <span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Free&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Busy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会生成一些新的分区 所以需要对分区进行重新排序 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">AL</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(AL)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(AL)-i):</span><br><span class="line">            <span class="keyword">if</span>(AL[j].address &gt; AL[j+<span class="number">1</span>].address):</span><br><span class="line">                AL[j],AL[j+<span class="number">1</span>] = AL[j+<span class="number">1</span>],AL[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(AL)):</span><br><span class="line">        AL[i].num = i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> AL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最小空闲区放在最上面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_minsize</span>(<span class="params">AL</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(AL)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(AL)-i):</span><br><span class="line">            <span class="keyword">if</span>(AL[j].size &gt; AL[j+<span class="number">1</span>].size):</span><br><span class="line">                AL[j],AL[j+<span class="number">1</span>] = AL[j+<span class="number">1</span>],AL[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> AL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最大空闲区放在最上面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_maxsize</span>(<span class="params">AL</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(AL)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(AL)-i):</span><br><span class="line">            <span class="keyword">if</span>(AL[j].size &lt; AL[j+<span class="number">1</span>].size):</span><br><span class="line">                AL[j],AL[j+<span class="number">1</span>] = AL[j+<span class="number">1</span>],AL[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> AL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">AL</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> AL:</span><br><span class="line">        temp_judge = judge_busy(i.isFree)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;:&lt;5d&#125;\t&#123;:&lt;4d&#125;\t&#123;:&lt;4d&#125;\t&#123;&#125;\t&quot;</span>.<span class="built_in">format</span>(i.num,i.address,i.size,temp_judge))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tichu</span>(<span class="params">AL</span>):</span><br><span class="line">    new_AL = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> AL:</span><br><span class="line">        <span class="keyword">if</span> i.size != <span class="number">0</span>:</span><br><span class="line">            new_AL.append(i)</span><br><span class="line">    AL= []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_AL:</span><br><span class="line">        AL.append(i)</span><br><span class="line">    <span class="comment"># 函数中要承接一下返回的AL</span></span><br><span class="line">    <span class="keyword">return</span> AL</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>具体算法函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首次适应</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FF</span>(<span class="params">AL,works</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;首次适应算法:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> works:</span><br><span class="line">        judge = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> AL:</span><br><span class="line">            <span class="keyword">if</span>(j.size &gt;= i <span class="keyword">and</span> j.isFree == <span class="literal">True</span>):</span><br><span class="line">                    judge = <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 分区完成后会生成一个新的分区</span></span><br><span class="line">                    a = j.address</span><br><span class="line">                    b = i</span><br><span class="line">                    isFree = <span class="literal">False</span></span><br><span class="line">                    jia = Area(<span class="number">0</span>,a,b,isFree) <span class="comment">#生成的一个新对象是被占用的</span></span><br><span class="line">                    <span class="comment"># 原来的对象分区 缩小了</span></span><br><span class="line">                    AL.append(jia)</span><br><span class="line">                    j.address = j.address + i</span><br><span class="line">                    j.size = j.size - i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> judge == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;分配失败&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">            tichu(AL)</span><br><span class="line">            sort(AL)</span><br><span class="line">            display(AL)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;分配成功&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">    AL=tichu(AL)</span><br><span class="line">    sort(AL)</span><br><span class="line">    display(AL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最佳适应算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BF</span>(<span class="params">AL,works</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最佳适应算法:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> works:</span><br><span class="line">        judge = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 每安排完一个分区 就要重新排序找最小空闲分区</span></span><br><span class="line">        sort_minsize(AL)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> AL:</span><br><span class="line">            <span class="keyword">if</span>(j.size &gt;= i <span class="keyword">and</span> j.isFree == <span class="literal">True</span>):</span><br><span class="line">                judge = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 添加一个新分区</span></span><br><span class="line">                a = j.address</span><br><span class="line">                b = i</span><br><span class="line">                isFree = <span class="literal">False</span></span><br><span class="line">                jia = Area(<span class="number">0</span>,a,b,isFree)</span><br><span class="line">                AL.append(jia)</span><br><span class="line">                j.address = j.address + i</span><br><span class="line">                j.size = j.size -i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> judge == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;分配失败&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">            tichu(AL)</span><br><span class="line">            sort(AL)</span><br><span class="line">            display(AL)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;分配成功&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">    AL=tichu(AL)</span><br><span class="line">    <span class="comment"># for i in AL:</span></span><br><span class="line">    <span class="comment">#     print(i.size)</span></span><br><span class="line">    sort(AL)</span><br><span class="line">    display(AL)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最坏适应算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">WF</span>(<span class="params">AL,works</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最坏适应算法:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> works:</span><br><span class="line">        judge = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 每安排完一个分区 就要重新排序找最小空闲分区</span></span><br><span class="line">        sort_maxsize(AL)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> AL:</span><br><span class="line">            <span class="keyword">if</span> (j.size &gt;= i <span class="keyword">and</span> j.isFree == <span class="literal">True</span>):</span><br><span class="line">                judge = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 添加一个新分区</span></span><br><span class="line">                a = j.address</span><br><span class="line">                b = i</span><br><span class="line">                isFree = <span class="literal">False</span></span><br><span class="line">                jia = Area(<span class="number">0</span>, a, b, isFree)</span><br><span class="line">                AL.append(jia)</span><br><span class="line">                j.address = j.address + i</span><br><span class="line">                j.size = j.size - i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> judge == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;分配失败&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">            tichu(AL)</span><br><span class="line">            sort(AL)</span><br><span class="line">            display(AL)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;分配成功&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index\taddress\tsize\tstatus\t&quot;</span>)</span><br><span class="line">    AL=tichu(AL)</span><br><span class="line"></span><br><span class="line">    sort(AL)</span><br><span class="line">    display(AL)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ol start="4"><li>主函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    temp = []</span><br><span class="line">    temp_judge = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入空闲块:&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        str_temp = <span class="built_in">input</span>()</span><br><span class="line">        temp.append(str_temp)</span><br><span class="line">        <span class="keyword">if</span> (str_temp == <span class="string">&#x27;#&#x27;</span>):</span><br><span class="line">            temp.remove(temp[<span class="built_in">len</span>(temp)-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    areas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">        num,address,size = temp[i].split()   <span class="comment">#分裂字符串</span></span><br><span class="line">        isFree = <span class="literal">True</span></span><br><span class="line">        areas.append([])</span><br><span class="line">        areas[i].append(<span class="built_in">int</span>(num))</span><br><span class="line">        areas[i].append(<span class="built_in">int</span>(address))</span><br><span class="line">        areas[i].append(<span class="built_in">int</span>(size))</span><br><span class="line">        areas[i].append(isFree)</span><br><span class="line">    <span class="comment"># print(areas)</span></span><br><span class="line"></span><br><span class="line">    temp_work = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入作业块:&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        str_work = <span class="built_in">input</span>()</span><br><span class="line">        temp_work.append(str_work)</span><br><span class="line">        <span class="keyword">if</span>(str_work == <span class="string">&#x27;#&#x27;</span>):</span><br><span class="line">            temp_work.remove(temp_work[<span class="built_in">len</span>(temp_work)-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    works = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp_work)):</span><br><span class="line">        works.append(<span class="built_in">int</span>(temp_work[i]))</span><br><span class="line">    <span class="comment"># print(works)</span></span><br><span class="line"></span><br><span class="line">    AL = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> areas:</span><br><span class="line">        AL.append(Area(i[<span class="number">0</span>],i[<span class="number">1</span>],i[<span class="number">2</span>],i[<span class="number">3</span>]))</span><br><span class="line">    <span class="comment"># print(AL[1].num)</span></span><br><span class="line">    FF(AL,works)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    AL2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> areas:</span><br><span class="line">        AL2.append(Area(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>], i[<span class="number">3</span>]))</span><br><span class="line">    BF(AL2,works)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    AL3 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> areas:</span><br><span class="line">        AL3.append(Area(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>], i[<span class="number">3</span>]))</span><br><span class="line">    WF(AL3,works)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、实验改进意见与感悟"><a href="#八、实验改进意见与感悟" class="headerlink" title="八、实验改进意见与感悟"></a>八、实验改进意见与感悟</h2><p>可变分区系统不预先划分固定分区，有较大灵活性。首次适应法算法简单，遍历遇到第一个满足条件的空闲区即进行分配，但空间利用率较低；最坏适应算法将空闲块由小到大来遍历分配，优点是空间利用率高，缺点是每轮分配完都要重新排序，开销巨大；最坏适应算法是将空闲块由大到小来遍历分配，优点是不易产生碎片，遍历次数最少，缺点是空间利用率不如最佳适应算法，且开销巨大。另一点，实验过程仅仅只考虑到了申请内存的过程，没有考虑到边申请边释放内存的过程。同时，使用python语言，对类的实例化有了进一步了解，掌握操控多种类对象之间的函数操作。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面调度算法模拟</title>
      <link href="/posts/yemian/"/>
      <url>/posts/yemian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ul><li>了解内存分页管理方法以及页面调度策略</li><li>实现FIFO、LRU算法</li><li>比较两种算法的优缺点</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><ul><li>FIFO先进先出置换算法</li><li>LRU最近最少使用置换算法</li></ul><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h2><ul><li>实践平台：windows</li><li>编写环境：python</li><li>编译器：pycharm</li></ul><h2 id="四、实验设计原理"><a href="#四、实验设计原理" class="headerlink" title="四、实验设计原理"></a>四、实验设计原理</h2><ol><li><p>FIFO先进先出置换算法</p><p>新页面进入时，总是选择最先装入内存的一页调出（把驻留内存中时间最长的一页调出）</p></li><li><p>LRU最近最少使用置换算法</p><p>新页面进入是。总是选择距离限制最长时间内没有被访问过的页面先调出。</p></li></ol><h2 id="五、实验详细实现过程及算法流程"><a href="#五、实验详细实现过程及算法流程" class="headerlink" title="五、实验详细实现过程及算法流程"></a>五、实验详细实现过程及算法流程</h2><ol><li><p>FIFO先进先出置换算法</p><img src="文件储存\zhr's Blog\source\_posts\页面调度算法模拟\FIFO.jpg" style="zoom:50%;"></li><li><p>LRU最近最少使用置换算法</p><img src="文件储存\zhr's Blog\source\_posts\页面调度算法模拟\LRU.jpg" style="zoom:50%;"></li></ol><h2 id="六、实验调试与结果分析"><a href="#六、实验调试与结果分析" class="headerlink" title="六、实验调试与结果分析"></a>六、实验调试与结果分析</h2><ol><li><p>输入</p><p>![](D:\文件储存\zhr’s Blog\source_posts\页面调度算法模拟\实验三输入.png)</p></li></ol><ol start="2"><li>FIFO</li></ol><p>![](D:\文件储存\zhr’s Blog\source_posts\页面调度算法模拟\实验三FIFO.png)</p><ol start="3"><li>LRU</li></ol><p>![](D:\文件储存\zhr’s Blog\source_posts\页面调度算法模拟\实验三LRU.png)</p><h2 id="七、源代码"><a href="#七、源代码" class="headerlink" title="七、源代码"></a>七、源代码</h2><ol><li><p>Page类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建page 页类 去记录 三个页中分别放置的页面索引以及到目前为止被放在这个页面中记录了多少次</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,index,num</span>):</span><br><span class="line">        self.index = index</span><br><span class="line">        self.num = num</span><br></pre></td></tr></table></figure></li><li><p>功能函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">zhihuan_num,pages</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> mem[i]:</span><br><span class="line">            <span class="built_in">print</span>(j,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;置换次数为:&#x27;</span>,zhihuan_num)</span><br><span class="line">    results = <span class="built_in">float</span>(zhihuan_num) / <span class="built_in">len</span>(pages)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;置换率为:&#x27;</span>,results)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>具体算法函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个页面 则取三个数出来</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FIFO</span>(<span class="params">pages</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;先进先出置换算法:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pages:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去遍历这个序列</span></span><br><span class="line">    <span class="comment"># 这个列表的大小就是3</span></span><br><span class="line">    P = []</span><br><span class="line">    <span class="comment"># 序列中的数在页面中是否已经出现</span></span><br><span class="line">    is_in = <span class="literal">False</span></span><br><span class="line">    zhihuan_num = <span class="number">0</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pages)):</span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">3</span>:</span><br><span class="line">            P.append(Page(pages[i],<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,num):</span><br><span class="line">                mem[i-j][i]=pages[i-j]</span><br><span class="line">            num +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> P:</span><br><span class="line">                k.num = k.num+<span class="number">1</span></span><br><span class="line">            <span class="comment"># for i in P:</span></span><br><span class="line">            <span class="comment">#     print(i.index,end=&quot;&quot;)</span></span><br><span class="line">            <span class="comment"># print()</span></span><br><span class="line">            <span class="comment"># print(mem)</span></span><br><span class="line">            zhihuan_num +=<span class="number">1</span></span><br><span class="line">        <span class="comment"># num 为 3 2 1  置换三次</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># index = 0  num = 0</span></span><br><span class="line">            max_page = Page(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            max_weizhi = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="comment"># 相等则不用替换</span></span><br><span class="line">                <span class="keyword">if</span>(pages[i] == P[j].index):</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        <span class="comment"># 将原来的最后一个数向后复制一个</span></span><br><span class="line">                        mem[k].append(mem[k][-<span class="number">1</span>])</span><br><span class="line">                    <span class="comment"># 完成一次扫描后要为num+1</span></span><br><span class="line">                    <span class="keyword">for</span> m <span class="keyword">in</span> P:</span><br><span class="line">                        m.num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    is_in = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is_in == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="comment"># 寻找最大的num</span></span><br><span class="line">                    <span class="keyword">if</span>(max_page.num &lt; P[j].num):</span><br><span class="line">                        max_weizhi = j</span><br><span class="line">                        max_page = P[j]</span><br><span class="line"><span class="comment">#                   记录替换的位置</span></span><br><span class="line">                p = Page(pages[i],<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 完成替换</span></span><br><span class="line">                P[max_weizhi] = p</span><br><span class="line">                P[max_weizhi].num=<span class="number">0</span></span><br><span class="line">                <span class="comment"># 修改mem对应的列表</span></span><br><span class="line"></span><br><span class="line">                mem[max_weizhi].append(p.index)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">if</span> k != max_weizhi:</span><br><span class="line">                        <span class="comment"># 将原来的最后一个数向后复制一个</span></span><br><span class="line">                        mem[k].append(mem[k][-<span class="number">1</span>])</span><br><span class="line">                zhihuan_num += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 每完成一次替换 所有的页面都要+1</span></span><br><span class="line">            is_in = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 完成一次扫描后要为num+1</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> P:</span><br><span class="line">            m.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># for i in P:</span></span><br><span class="line">            <span class="comment">#     i.num +=1</span></span><br><span class="line">            <span class="comment">#     print(i.index,end=&quot;&quot;)</span></span><br><span class="line">            <span class="comment"># print()</span></span><br><span class="line">            <span class="comment"># print(mem)</span></span><br><span class="line"></span><br><span class="line">    display(zhihuan_num,pages)</span><br><span class="line"><span class="comment">#                     置换完成之后要break出来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LRU</span>(<span class="params">pages</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;最近最少使用算法:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pages:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    P = []</span><br><span class="line">    is_in = <span class="literal">False</span></span><br><span class="line">    zhihuan_num = <span class="number">0</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pages)):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">3</span>:</span><br><span class="line">            P.append(Page(pages[i], <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num):</span><br><span class="line">                mem[i - j][i] = pages[i - j]</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记住在完成页面替换之后 要对页面上的num+1</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> P:</span><br><span class="line">                k.num = k.num + <span class="number">1</span></span><br><span class="line">            zhihuan_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># index = 0  num = 0</span></span><br><span class="line">            max_page = Page(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            max_weizhi = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="comment"># 相等则不用替换</span></span><br><span class="line">                <span class="keyword">if</span> (pages[i] == P[j].index):</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        <span class="comment"># 将原来的最后一个数向后复制一个</span></span><br><span class="line">                        mem[k].append(mem[k][-<span class="number">1</span>])</span><br><span class="line">                        P[j].num=<span class="number">0</span></span><br><span class="line">                    is_in = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is_in == <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="comment"># 寻找最大的num</span></span><br><span class="line">                    <span class="keyword">if</span> (max_page.num &lt; P[j].num):</span><br><span class="line">                        max_weizhi = j</span><br><span class="line">                        max_page = P[j]</span><br><span class="line">                <span class="comment">#                   记录替换的位置</span></span><br><span class="line">                p = Page(pages[i], <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 完成替换</span></span><br><span class="line">                P[max_weizhi] = p</span><br><span class="line">                P[max_weizhi].num = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 修改mem对应的列表</span></span><br><span class="line"></span><br><span class="line">                mem[max_weizhi].append(p.index)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">if</span> k != max_weizhi:</span><br><span class="line">                        <span class="comment"># 将原来的最后一个数向后复制一个</span></span><br><span class="line">                        mem[k].append(mem[k][-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                zhihuan_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 完成一次扫描后要为num+1</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> P:</span><br><span class="line">                m.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            is_in = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    display(zhihuan_num,pages)</span><br></pre></td></tr></table></figure><ol start="4"><li>主函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入页面请求序列:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    temp = <span class="built_in">input</span>()</span><br><span class="line">    pages = temp.split()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pages:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            pages.remove(temp[<span class="built_in">len</span>(temp)-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    pages = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,pages))</span><br><span class="line"></span><br><span class="line">    mem = [[], [], []]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            mem[i].append(<span class="number">0</span>)</span><br><span class="line">    FIFO(pages)</span><br><span class="line"></span><br><span class="line">    mem = [[], [], []]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            mem[i].append(<span class="number">0</span>)</span><br><span class="line">    LRU(pages)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="八、实验改进意见与感悟"><a href="#八、实验改进意见与感悟" class="headerlink" title="八、实验改进意见与感悟"></a>八、实验改进意见与感悟</h2><p>本次实验实现了FIFO算法和LRU算法。FIFO算法简单易实现，但在有些情况下，该算法的缺页率会比较高，甚至出现陷阱现象。即使用更多的内存块，反而会导致缺页中断率更高；LRU算法更加合理，不会发生陷阱现象。但是实际使用中需要和硬件计数器、寄存器进行配合，操作起来较为复杂。相较于前两次实验，本次实验的实现过程更为困难，特别是输出形式的配置，对于算法整体流程的掌握。但是仍有不足的是没有很好的把各个功能整合成函数，而是直接分散在了具体算法函数中，这一点值得优化。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业调度</title>
      <link href="/posts/zuoye/"/>
      <url>/posts/zuoye/</url>
      
        <content type="html"><![CDATA[<h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ul><li>学习作业调度基本思想</li><li>熟练描述各种作业调度算法的过程</li><li>分析各种算法的优缺点</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><ul><li>FCFS先来先服务算法</li><li>SJF最短作业优先算法</li><li>HRN最高响应比算法、</li></ul><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h2><ul><li>实践平台：windows</li><li>编写环境：python</li><li>编译器：pycharm</li></ul><h2 id="四、实验设计原理"><a href="#四、实验设计原理" class="headerlink" title="四、实验设计原理"></a>四、实验设计原理</h2><ol><li><p>FCFS：先来先服务</p><p>根据作业进入的先后顺序进行调度，最先进入的最先执行</p></li><li><p>SJF：最短作业优先</p><p>根据执行所需的时间来确定下一个执行的作业</p></li><li><p>HRN：最高相应比优先</p><p>输入井中的每个作业根据当前运行的作业计算出作业的响应比，响应比最高的将被调度</p></li></ol><h2 id="五、实验详细实现过程及算法流程"><a href="#五、实验详细实现过程及算法流程" class="headerlink" title="五、实验详细实现过程及算法流程"></a>五、实验详细实现过程及算法流程</h2><ol><li>FCFS先来先服务</li></ol><p><img src="FCFS.jpg" alt="FCFS"></p><ol start="2"><li>SJF最短作业优先</li></ol><p><img src="SJF.jpg"></p><ol start="3"><li>HRN最高响应比优先</li></ol><p><img src="HRN.jpg"></p><h2 id="六、实验调试与结果分析"><a href="#六、实验调试与结果分析" class="headerlink" title="六、实验调试与结果分析"></a>六、实验调试与结果分析</h2><p>输入:<img src="%E5%AE%9E%E9%AA%8C%E4%B8%80%E8%BE%93%E5%85%A5.png"></p><pre><code>        1. FCFS</code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E4%B8%80FCFS.png"></p><ol start="2"><li>SJF</li></ol><p><img src="%E5%AE%9E%E9%AA%8C%E4%B8%80SJF.png"></p><pre><code>        3. HRN</code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E4%B8%80HRN.png"></p><h2 id="七、源代码"><a href="#七、源代码" class="headerlink" title="七、源代码"></a>七、源代码</h2><ol><li>Homework类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Homework</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,num,input_time,run_time</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.input_time = <span class="built_in">int</span>(input_time)</span><br><span class="line">        self.run_time = <span class="built_in">int</span>(run_time)  <span class="comment">#执行时间</span></span><br><span class="line">        self.start_time = <span class="number">0</span>    <span class="comment">#开始时间</span></span><br><span class="line">        self.end_time = <span class="number">0</span>    <span class="comment">#结束时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 变量名和函数名不能重复</span></span><br><span class="line">        self.turn_around = <span class="number">0</span>  <span class="comment">#周转时间</span></span><br><span class="line">        self.dai_time = <span class="number">0</span>     <span class="comment">#带权周转时间</span></span><br><span class="line">        <span class="comment"># self.state = 0   #等待状态 说明暂时还未上单通道</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算周转时间</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zhouzhuan</span>(<span class="params">self</span>):</span><br><span class="line">        sub = <span class="built_in">int</span>(self.end_time/<span class="number">100</span>) - <span class="built_in">int</span>(self.input_time/<span class="number">100</span>)</span><br><span class="line">        self.turn_around = self.end_time%<span class="number">100</span> - self.input_time%<span class="number">100</span> + sub*<span class="number">60</span></span><br><span class="line">        <span class="keyword">return</span> self.turn_around</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算带权周转时间</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">daiquan</span>(<span class="params">self</span>):</span><br><span class="line">        sub = <span class="built_in">int</span>(self.end_time/<span class="number">100</span>) - <span class="built_in">int</span>(self.input_time/<span class="number">100</span>)</span><br><span class="line">        self.dai_time = (self.end_time%<span class="number">100</span> - self.input_time%<span class="number">100</span> + sub*<span class="number">60</span>)/self.run_time</span><br><span class="line">        <span class="keyword">return</span> self.dai_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使用str.format进行字符串对齐操作</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;:&lt;2d&#125;    &#123;:&lt;2d&#125;      &#123;:&lt;2d&#125;             &#123;:&lt;3d&#125;    &#123;:&lt;5d&#125;      &#123;:&lt;2d&#125;      &#123;:&gt;4.3f&#125;&quot;</span>  .<span class="built_in">format</span>(self.num,self.input_time, self.run_time, self.start_time, self.end_time, self.turn_around, self.dai_time))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>2. 功能函数</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相减后返回的是分钟</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_sub</span>(<span class="params">a_time,b_time</span>):</span><br><span class="line">    hour1 = <span class="built_in">int</span>(a_time/<span class="number">100</span>)</span><br><span class="line">    minute1 = a_time%<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    hour2 = <span class="built_in">int</span>(b_time/<span class="number">100</span>)</span><br><span class="line">    minute2 = b_time%<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    ans = (hour2-hour1)*<span class="number">60</span> + (minute2-minute1)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相加返回的是时钟时间  a_time为时钟时间  b_run为运行时间（分钟）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_add</span>(<span class="params">a_time,b_run</span>):</span><br><span class="line">    <span class="comment"># python中使用除法时不是默认int的</span></span><br><span class="line">    hour1 = <span class="built_in">int</span>(a_time/<span class="number">100</span>)</span><br><span class="line">    minute1 = a_time%<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    hour2 = hour1+<span class="built_in">int</span>((minute1+b_run)/<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    minute2 = (minute1+b_run)%<span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统一使用int类型</span></span><br><span class="line">    b_time = hour2*<span class="number">100</span> + minute2</span><br><span class="line">    <span class="keyword">return</span> b_time</span><br><span class="line"><span class="comment"># 返回的是相加之后的时间b_time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对得到的作业序列进行按进入时间排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">Homework</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Homework)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(Homework)):</span><br><span class="line">            <span class="keyword">if</span> (Homework[i].input_time &gt; Homework[j].input_time):</span><br><span class="line">                t = Homework[i].input_time</span><br><span class="line">                Homework[i].input_time = Homework[j].input_time</span><br><span class="line">                Homework[j].input_time = t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    </p><pre><code>   3. 具体算法函数</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FCFS存一个列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FCFS</span>(<span class="params">Homework</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;先来先服务算法:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业\t进入时间\t估计运行时间(分钟)\t开始时间\t结束时间\t周转时间\t带权周转时间&quot;</span>)</span><br><span class="line">    <span class="comment"># 对得到的作业序列先进行排序</span></span><br><span class="line">    sort(Homework)</span><br><span class="line">    Starttime = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 最早的开始时间</span></span><br><span class="line">    sum_zhouzhuan = <span class="number">0</span></span><br><span class="line">    sum_daiquan = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Homework:</span><br><span class="line">        <span class="keyword">if</span> Starttime&gt;=i.input_time:</span><br><span class="line">            i.start_time = Starttime</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Starttime = i.input_time</span><br><span class="line">            i.start_time = Starttime</span><br><span class="line"></span><br><span class="line">        Starttime = time_add(Starttime,i.run_time)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始计算下一个作业的开始时间</span></span><br><span class="line">        i.end_time = Starttime</span><br><span class="line">        <span class="comment"># 计算总周转时间 便于求T</span></span><br><span class="line">        sum_zhouzhuan += i.zhouzhuan()</span><br><span class="line"><span class="comment">#         计算总带权周转时间</span></span><br><span class="line">        sum_daiquan += i.daiquan()</span><br><span class="line">        i.display()</span><br><span class="line"></span><br><span class="line">    T = sum_zhouzhuan/<span class="built_in">len</span>(Homework)</span><br><span class="line">    W = sum_daiquan/<span class="built_in">len</span>(Homework)</span><br><span class="line">    <span class="comment"># 计算作业平均周转时间T  作业带权平均周转时间W</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业平均周转时间 T = %.3f 分钟&quot;</span> % T)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业带权平均周转时间 W = %.3f &quot;</span> % W)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SJF</span>(<span class="params">Homework</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;短作业优先算法:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业\t进入时间\t估计运行时间(分钟)\t开始时间\t结束时间\t周转时间\t带权周转时间&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sort(Homework)</span><br><span class="line"></span><br><span class="line">    Starttime = Homework[<span class="number">0</span>].input_time</span><br><span class="line">    <span class="comment"># 为第一个进入的作业赋值好开始时间</span></span><br><span class="line"></span><br><span class="line">    sum_zhouzhuan = <span class="number">0</span></span><br><span class="line">    sum_daiquan = <span class="number">0</span></span><br><span class="line">    index = Homework[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对每个作业都完成一次循环寻找最小运行时间</span></span><br><span class="line">    <span class="comment"># 注意：如果我们要同时输出多种方法的结果 要么重新赋值新对象 要么就要重新赋值在FCFS中被修改的对象属性</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Homework)):</span><br><span class="line">        min_runtime = <span class="number">999</span></span><br><span class="line">        <span class="comment"># 遍历一次作业 寻找最小runtime</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> Homework:</span><br><span class="line">            <span class="comment"># 判断条件  当前未执行 运行时间小于min 到达时间小于开始时间</span></span><br><span class="line">            <span class="keyword">if</span> (j.run_time &lt; min_runtime <span class="keyword">and</span> j.input_time &lt;= Starttime <span class="keyword">and</span> j.start_time == <span class="number">0</span> ):</span><br><span class="line">                min_runtime = j.run_time</span><br><span class="line">                index = j</span><br><span class="line"><span class="comment">#            循环遍历得到当前未被标记的 且运行时间最小的作业序列</span></span><br><span class="line"></span><br><span class="line">        index.start_time = Starttime</span><br><span class="line">        index.run_time = min_runtime</span><br><span class="line">        Starttime = time_add(Starttime,index.run_time)</span><br><span class="line">        index.end_time = Starttime</span><br><span class="line"></span><br><span class="line">        sum_zhouzhuan += index.zhouzhuan()</span><br><span class="line">        sum_daiquan += index.daiquan()</span><br><span class="line">        index.display()</span><br><span class="line"></span><br><span class="line">    T = sum_zhouzhuan / <span class="built_in">len</span>(Homework)</span><br><span class="line">    W = sum_daiquan / <span class="built_in">len</span>(Homework)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业平均周转时间 T = %.3f 分钟&quot;</span> % T)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业带权平均周转时间 W = %.3f &quot;</span> % W)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要不停更新作业等待时间  要去比较每一轮循环中的最大相应比</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HRN</span>(<span class="params">Homework</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最高响应比算法:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业\t进入时间\t估计运行时间(分钟)\t开始时间\t结束时间\t周转时间\t带权周转时间&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sort(Homework)</span><br><span class="line"></span><br><span class="line">    Starttime = Homework[<span class="number">0</span>].input_time</span><br><span class="line">    sum_zhouzhuan = <span class="number">0</span></span><br><span class="line">    sum_daiquan = <span class="number">0</span></span><br><span class="line">    index = Homework[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 寻找最高响应比</span></span><br><span class="line">    max_R = <span class="number">0</span></span><br><span class="line">    R = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 满足最高响应比同时满足到达时间早于开始时间</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Homework)):</span><br><span class="line">        max_R = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> Homework:</span><br><span class="line">            a = j.start_time</span><br><span class="line">            b = j.input_time</span><br><span class="line">            <span class="comment"># j.start_time==0 表示当前作业未被标记</span></span><br><span class="line">            <span class="keyword">if</span>(j.start_time == <span class="number">0</span> <span class="keyword">and</span> j.input_time&lt;=Starttime):</span><br><span class="line">                <span class="comment"># j.end_time = time_add(Starttime,j.run_time)</span></span><br><span class="line">                <span class="comment"># zhouzhuan = j.zhouzhuan()</span></span><br><span class="line">                <span class="comment"># 周转时间 / 运行时间</span></span><br><span class="line">                R = (time_add(Starttime,j.run_time)-j.input_time) / j.run_time</span><br><span class="line">                <span class="keyword">if</span> (R&gt;max_R):</span><br><span class="line">                    max_R = R</span><br><span class="line">                    index = j</span><br><span class="line"></span><br><span class="line">        index.start_time = Starttime</span><br><span class="line"></span><br><span class="line">        Starttime = time_add(Starttime,index.run_time)</span><br><span class="line">        index.end_time = Starttime</span><br><span class="line"></span><br><span class="line">        sum_zhouzhuan += index.zhouzhuan()</span><br><span class="line">        sum_daiquan += index.daiquan()</span><br><span class="line">        index.display()</span><br><span class="line"></span><br><span class="line">    T = sum_zhouzhuan / <span class="built_in">len</span>(Homework)</span><br><span class="line">    W = sum_daiquan / <span class="built_in">len</span>(Homework)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业平均周转时间 T = %.3f 分钟&quot;</span> % T)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;作业带权平均周转时间 W = %.3f &quot;</span> % W)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>主函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入作业序列:&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        str_temp = <span class="built_in">input</span>()</span><br><span class="line">        temp.append(str_temp)</span><br><span class="line">        <span class="keyword">if</span>(str_temp == <span class="string">&#x27;#&#x27;</span>):</span><br><span class="line">            temp.remove(temp[<span class="built_in">len</span>(temp)-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">        num,start_time,run_time = temp[i].split()</span><br><span class="line">        jobs.append([])</span><br><span class="line">        jobs[i].append(<span class="built_in">int</span>(num))</span><br><span class="line">        jobs[i].append(<span class="built_in">int</span>(start_time))</span><br><span class="line">        jobs[i].append(<span class="built_in">int</span>(run_time))</span><br><span class="line"></span><br><span class="line">    homework1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(jobs)):</span><br><span class="line">        homework1.append(Homework(jobs[j][<span class="number">0</span>],jobs[j][<span class="number">1</span>],jobs[j][<span class="number">2</span>]))</span><br><span class="line">    FCFS(homework1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    homework2 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(jobs)):</span><br><span class="line">        homework2.append(Homework(jobs[j][<span class="number">0</span>], jobs[j][<span class="number">1</span>], jobs[j][<span class="number">2</span>]))</span><br><span class="line">    SJF(homework2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    homework3 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(jobs)):</span><br><span class="line">        homework3.append(Homework(jobs[j][<span class="number">0</span>], jobs[j][<span class="number">1</span>], jobs[j][<span class="number">2</span>]))</span><br><span class="line">    HRN(homework3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、实验改进意见与感悟"><a href="#八、实验改进意见与感悟" class="headerlink" title="八、实验改进意见与感悟"></a>八、实验改进意见与感悟</h2><p>作业调度算法较容易理解，思路较为简单，但实现起来并不是特别容易。先对三种算法进行分析：FCFS实现最简单，但若碰到长作业会导致后续较短作业等待时间过长；SJF每次都会选择最短时间的作业进行工作，可能会导致某些作业陷入饥饿；HRN结合了前两种优点，但也是开销最大的算法。本次实验我对三种算法的各自的优劣点有了更深入理解，同时我对python的类的实例化有了更充分了解。一般我们使用python不会构造数据结构进行类的实例化，本次实验我就是想尝试学习一下python的实例化，并构造对象列表，有了一定收获。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>demo1</title>
      <link href="/posts/55dc0e80/"/>
      <url>/posts/55dc0e80/</url>
      
        <content type="html"><![CDATA[<p>你好！</p><p>我是zhr</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
